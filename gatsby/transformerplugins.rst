Transformer plugins
===================

In previous chapter we learned how to get data from sources with `source plugins`.

The data fetched by this plugin could have a lot of informations, but often these informations are not in the right format to build our pages.

For example, if we want to build a blog and use Markdown files as our data for every blogpost, `gatsby-source-filesystem` is useful to retrieve the list of posts (all *md files) but we can't use the text inside of them to create our site pages.

`Transformer plugins` are used for this purpose: they take raw content from source plugins and transform it into something more usable.

First of all, we need to create some files inside a new folder `blogposts`:

.. code-block:: none

  src/blogposts/ploneconf_trainings.md
  
  ---
  title: "Ploneconf trainings"
  date: "2018-11-05"
  ---

  The first two days of Ploneconf are dedicated to trainings.

  There are a lot of interesting trainings.

  
  src/blogposts/ploneconf_talks.md
  
  ---
  title: "Ploneconf talks"
  date: "2018-11-07"
  ---

  From 7 to 9 November there will be a lot of interesting talks about Plone and web development in general.

  There will be also cool t-shirts and a party!

If we try to go back to our `files-list` page, we will se that 2 new files are listed. 

But we still do not have the right informations.

To get more informations to be queried (for example the title of the blogposts, or their text), we need to add a new plugin:

.. code-block:: console

  npm install --save gatsby-transformer-remark

And add it into our `gatsby-config.js` file in the plugins list:

.. code-block:: none

  ...
  plugins: [
    ...
    'gatsby-transformer-remark',
    ...
  ]
  ...

This plugin reads all the files generated by the `gatsby-source-filesystem` plugin and extract data from the items that he can handle (Markdown files for example), generating new nodes in GraphQL model with more useful metadata.

If we restart our server and see GraphiQL queries we will find two new available queries: `allMarkdownRemark` and `markDownRemark`.

Every source or transform plugin creates a set of new queries and `nodes`.

A node is a data entity generated by that plugin that exposes several attributes, and get its name from its `type` attribute.

In this case, the remark transofermer creates a list of nodes called `markDownRemark`.

GatsbyJS automatically generates also a GraphQL query type to get all the nodes of a certain type (an filter them by their attributes values) with a standard name: "all" + the node type name (in our case: allMarkdownRemark).

Exercise
++++++++

We want to create a blog, so we need to edit our `pages/index.js` to list all blogposts with these informations:

- Total number of posts
- For each post: title, date and description

Hints: try to play a bit with the `allMarkdownRemark` query and see how to retrieve all required informations.

..  admonition:: Solution
    :class: toggle

    .. code-block:: none

      import React from "react"
      import { graphql } from "gatsby"
      import Layout from '../components/layout'

      export default ({ data }) => {
        return (
          <Layout>
            <h1>A blog about The conference</h1>
            <h4>{data.allMarkdownRemark.totalCount} Posts</h4>
            {data.allMarkdownRemark.edges.map(({ node }) => (
              <div key={node.id}>
                <h3>
                  {node.frontmatter.title}{" "}
                  <span>
                    â€” {node.frontmatter.date}
                  </span>
                </h3>
                <p>{node.excerpt}</p>
              </div>
            ))}
          </Layout>
        )
      }

      export const query = graphql`
        query {
          allMarkdownRemark {
            totalCount
            edges {
              node {
                id
                frontmatter {
                  title
                  date(formatString: "DD MMMM, YYYY")
                }
                excerpt
              }
            }
          }
        }
      `