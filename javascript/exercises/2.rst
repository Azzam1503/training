NG2 APP component rendered in a browser view
============================================

..  warning::

    This exercise requires a working buildout using a fork of the
    collective.jstraining package.


For this exercise, we will run an angular 2 application inside a plone browser view.

We have most of the angular 2 boiler plate code created for you so let's just
finish up a few things so you can customize it.

We will be working in the `exercise2` directory of the collective.jstraining package.

Bootstrap
---------

Install npm dependencies::

    cd exercise2/static
    npm install


Add your angular 2 component
----------------------------

In your `exercise2/static/app` directory, add a file named `app.component.ts`. Use
this file to do anything you would like to the page. This example will stick
with the angular 2 quickstart code. We hope you like typescript::

    import { Component } from '@angular/core';
    @Component({
      selector: 'my-app',
      template: '<h1>NG2 from Exercise 2</h1>'
    })
    export class AppComponent { }



Like I said, you can do whatever in this module.


Register static resource directory
----------------------------------

Next, let’s register the static directory we just placed our script into. To
register, you need to add ZCML registration for the static directory your script
is in. Add this to the `exercise2/configure.zcml` file::

    <plone:static
         directory="static"
         type="plone"
         name="exercise2"
         />


Build the file with webpack
---------------------------

Our deployment is built using webpack::

    cd exercise2/static
    webpack


Whenever you make a change to your component files, webpack will auto re-build
the distribution


Register JavaScript resource
----------------------------

Let’s register our script as a JavaScript resource with Plone. In the
`exercise2/profiles/default/registry.xml` file, add configuration to register
your script::

    <records prefix="plone.resources/exercise2"
                interface='Products.CMFPlone.interfaces.IResourceRegistry'>
          <value key="js">++plone++exercise2/dist.js</value>
      </records>


Create your browser view
------------------------

..  warning::

    This might be redundant with other documentation. Skip ahead if you know
    how to create browser views.


Finally, let’s load our JavaScript file to only load on a specific page you need
it on.

In our case, let’s add a basic new page view. The page template doesn’t need to
implement any logic and we can use the main template to bring in the content of
the page we’re using in the JavaScript(h1). Add this into your `exercise1/page.pt` file::


    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
        xmlns:tal="http://xml.zope.org/namespaces/tal"
        xmlns:metal="http://xml.zope.org/namespaces/metal"
        xmlns:i18n="http://xml.zope.org/namespaces/i18n"
        lang="en"
        metal:use-macro="context/main_template/macros/master"
        i18n:domain="plone">
    <body>

      <metal:content-core fill-slot="content-core">
      <metal:content-core define-macro="content-core">
        <my-app></my-app>
      </metal:content-core>
      </metal:content-core>

    </body>
    </html>


The `my-app` tag is what is used for the component selector. You can customize
this and use whatever selector you like.


Load your JavaScript resource
-----------------------------

Add in view python code to tell Plone to render the script in the
`exercise2/browser.py` file::

    from Products.CMFPlone.resources import add_resource_on_request
    from Products.Five import BrowserView


    class Exercise2View(BrowserView):

        def __call__(self):
            # utility function to add resource to rendered page
            add_resource_on_request(self.request, 'exercise2')
            return super(Exercise1View, self).__call__()


The most interesting part here is to look at `add_resource_on_request`.

Finally, wire it up with ZCML registration in the `exercise1/configure.zcml` file::

    <browser:page
         name="exercise2"
         for="*"
         class=".browser.Exercise1View"
         template="page.pt"
         permission="zope2.View"
         />


Installation
------------

1) Start up your Plone instance
2) Install the `Exercise 2` add-on


Then, visit the URL:
`http://localhost:8080/Plone/front-page/@@exercise2`. This is assuming your Plone
is is located at the URL `http://localhost:8080/Plone`.


Production
----------

In this exercise, there is no special distinction between development and
production builds. Webpack re-builds the resource on every change for you
and the JavaScript build file is not added to any bundle--it is just loaded
for this particular page.
