Testing setup
=============

To run tests in Plone you need three things:

- Test runner
- Testing setup
- Tests

plonecli is the proper way to create new Plone packages because it automatically creates all the standard configuration to run
tests on a package.

Otherwise you need to create all of them manually.

Test runner
-----------

Plone's test runner is a zope.testing test-runner script called "test" generated by the buildout.

There is a `test` part in base.cfg file that uses a recipe for generate this script:

.. code-block:: ini

  [test]
  recipe = zc.recipe.testrunner
  eggs = ${instance:eggs}
  initialization =
      os.environ['TZ'] = 'UTC'
  defaults = ['-s', 'plonetraining.testing', '--auto-color', '--auto-progress']

There are other interesting parts in .cfg files created by plonecli, but right now we only need to focus on this one.

Testing setup
-------------

The testing setup for a Plone package is in a file called "testing.py" and looks like this:

.. code-block:: python

  class PlonetrainingTestingLayer(PloneSandboxLayer):

    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)

    def setUpZope(self, app, configurationContext):
        # Load any other ZCML that is required for your tests.
        # The z3c.autoinclude feature is disabled in the Plone fixture base
        # layer.
        import plone.restapi
        self.loadZCML(package=plone.restapi)
        self.loadZCML(package=plonetraining.testing)

    def setUpPloneSite(self, portal):
        applyProfile(portal, 'plonetraining.testing:default')


  PLONETRAINING_TESTING_FIXTURE = PlonetrainingTestingLayer()


  PLONETRAINING_TESTING_INTEGRATION_TESTING = IntegrationTesting(
      bases=(PLONETRAINING_TESTING_FIXTURE,),
      name='PlonetrainingTestingLayer:IntegrationTesting',
  )


  PLONETRAINING_TESTING_FUNCTIONAL_TESTING = FunctionalTesting(
      bases=(PLONETRAINING_TESTING_FIXTURE,),
      name='PlonetrainingTestingLayer:FunctionalTesting',
  )


  PLONETRAINING_TESTING_ACCEPTANCE_TESTING = FunctionalTesting(
      bases=(
          PLONETRAINING_TESTING_FIXTURE,
          REMOTE_LIBRARY_BUNDLE_FIXTURE,
          z2.ZSERVER_FIXTURE,
      ),
      name='PlonetrainingTestingLayer:AcceptanceTesting',
  )

There are three main pieces:

- Layer definition: setup a list of presets for testing environment (fixtures) and make availabe in testing environment the packages that we need for tests.
- Package fixture definition: this is the base setup for testing our package (PLONETRAINING_TESTING_FIXTURE).
- Set different test types: Depending on our needs, we can use different test types like functional or integration tests.

plone.app.testing has a set of base Layers and Fixtures that we use as strting point.

Tests
-----

Tests are located into "tests" folder. In this folder you can create as many tests you want in different files.

Tests can be grouped into test cases depending on the test type (functional, integration or robot) and on the functionality that they are testing.

A test case defines which layer should be used, can setup the environment before tests execution (setUp method) and can perform some 
actions after all tests has been executed (tearDown method).

plonecli creates a basic test case for testing that the product installs correctly and registers its browserlayer.
