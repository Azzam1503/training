# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-28 20:53-0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../behaviors2.rst:2
# 89d71dc2a1d04fd3b3b51fcf8d8cd2fb
msgid "More complex behaviors"
msgstr ""

#: ../behaviors2.rst:5
# 6387f57dc5324c61b7531952f1a13e5b
msgid "Using Annotations"
msgstr ""

#: ../behaviors2.rst:8
# eb7d36e9ca6c4ae28993d93d37965d7e
msgid "We are going to store the information in an annotation. Not because it is needed but because you will find code that uses annotations and need to understand the implications."
msgstr ""

#: ../behaviors2.rst:10
# 6cdfa51c70cc44ec96ad6b36e2acf057
msgid "`Annotations`_ in Zope/Plone mean that data won't be stored directly on an object but in an indirect way and with namespaces so that multiple packages can store information under the same attribute, without colliding."
msgstr ""

#: ../behaviors2.rst:12
# 1a3e654de94546c49c7c5b9855ab8a01
msgid "So using annotations avoids namespace conflicts. The cost is an indirection. The dictionary is persistent so it has to be stored separately. Also, one could give attributes a name containing a namespace prefix to avoid naming collisions."
msgstr ""

#: ../behaviors2.rst:22
# 655105291ce14f43b5b59c007ed19592
msgid "Using Schema"
msgstr ""

#: ../behaviors2.rst:26
# 79c0520a6b984e988c81d51f63f14dd8
msgid "The attribute where we store our data will be declared as a schema field. We mark the field as a ommitted field, because we are not going to create z3c.form widgets for displaying them. We do provide a schema, because many other packages use the schema information to get knowledge of the relevant fields."
msgstr ""

#: ../behaviors2.rst:28
# 3475c354c72f4d7bb081a0ab9eb6952a
msgid "For example, when files have been migrated to blobs, new objects had to be created and every schema field was copied. The code can't know about our field, except if we provide schema information."
msgstr ""

#: ../behaviors2.rst:35
# 75883a5fbdbd4623a9048db8e1d4f049
msgid "Writing Code"
msgstr ""

#: ../behaviors2.rst:37
# 6e74054944974d96895e0170bb672075
msgid "To start, we create a directory :file:`behavior` with an empty :file:`behavior/__init__.py` file."
msgstr ""

#: ../behaviors2.rst:39
# 0ad852b0139f4bfd941b6be5138636de
msgid "Next we must, as always, register our zcml."
msgstr ""

#: ../behaviors2.rst:41
# 8a5802de718c45cbb30bd170b4fe0d4d
msgid "First, add the information that there will be another zcml file in :file:`configure.zcml`"
msgstr ""

#: ../behaviors2.rst:56
# 0d454f6971694aed8110073fe964c59d
msgid "Next, create :file:`behavior/configure.zcml`"
msgstr ""

#: ../behaviors2.rst:75
# f2ca15f8225546e88bebef19a48c3442
msgid "There are some important differences to our first behavior:"
msgstr ""

#: ../behaviors2.rst:77
# 16ebe6ecd57a4d5195791d6256bae828
msgid "There is a marker interface"
msgstr ""

#: ../behaviors2.rst:78
# 063aad8ac0744b4988754c12d9526583
msgid "There is a factory"
msgstr ""

#: ../behaviors2.rst:82
# c9726d9483014e5b8a79390868e124f1
msgid "The factory is a class that provides the behavior logic and gives access to the attributes we provide. Factories in Plone/Zope land are retrieved by adapting an object with an interface. If I want my behavior, I'd write :samp:`IVoting(object)`"
msgstr ""

#: ../behaviors2.rst:86
# a7dcce5f76934828adaab97f312ae080
msgid "But in order for this to work, my object may *not* be implementing the IVoting interface, because if it would, :samp:`IVoting(object)` would return the object itself! If I need a marker interface for objects providing my behavior, I must provide one, for this we use the marker attribute. My object implements :samp:`IVotable` and because of this, we can write views and viewlets just for this content type."
msgstr ""

#: ../behaviors2.rst:89
# db224e14f8ec4304b4d266865b9980e7
msgid "The interfaces need to be written, in our cases into a file :file:`interfaces.py`:"
msgstr ""

#: ../behaviors2.rst:165
# 2527eb1aa09e472aa029c7309982dfc8
msgid "This is a lot of code. The IVotableLayer we will need later for viewlets and browser views. Lets add it right here. The IVotable interface is the simple marker interface. It will only be used to bind browser views and viewlets to content types that provide our behavior, so no code needed."
msgstr ""

#: ../behaviors2.rst:168
# 5143a931006a40f59db9ae5ec0785f0c
msgid "The IVoting class is more complex, as you can see. While IVoting is just an interface, we use :samp:`plone.supermodel.model.Schema` for advanced dexterity features. Zope.schema provides no means for hiding fields. The directives :samp:`form.omitted` from :samp:`plone.autoform` allow us to annotate this additional information so that the autoform renderers for forms can use the additional information."
msgstr ""

#: ../behaviors2.rst:171
# 156ee307f88c4d81b6446988d55e3c90
msgid "We make this omit conditional. If we run Plone in debug mode, we will be able to see the internal data in the edit form."
msgstr ""

#: ../behaviors2.rst:173
# 09477a05018e4746b447d65515ece502
msgid "We create minimal schema fields for our internal data structures. For a small test, I removed the form omitted directives and opened the edit view of a talk that uses the behavior. After seeing the ugliness, I decided that I should provide at least  minimum of information. Titles and required are purely optional, but very helpful if the fields won't be omitted, something that can be helpful when debugging the behavior. Later, when we implement the behavior, the :samp:`votes` and :samp:`voted` attributes are implemented in such a way that you can't just modify these fields, they are read only."
msgstr ""

#: ../behaviors2.rst:176
# 5fcffbfad7e641d38c5f1fd5247fa841
msgid "Then we define the API that we are going to use in browser views and viewlets."
msgstr ""

#: ../behaviors2.rst:178
# 718782a336e84df39163667e9d946705
msgid "The last line ensures that the schema fields are known to other packages. Whenever some code wants all schemas from an object, he receives the schema defined directly on the object and the additional schemata. Additional schemata are compiled by looking for behaviors and whether they provide the :samp:`IFormFieldProvider` functionality. Only then we fields are known as schema fields."
msgstr ""

#: ../behaviors2.rst:180
# 3e4be264d0554716b636f71847143fa5
msgid "Now the only thing that is missing is the behavior, which we must put into :file:`behavior/voting.py`"
msgstr ""

#: ../behaviors2.rst:215
# e971c27df0614b6a985ba2e731340f61
msgid "In our :samp:`__init__` method we get *annotations* from the object. We look for data with a specific key."
msgstr ""

#: ../behaviors2.rst:218
# bd3fd05c4ff44b53b97f75e429a10e91
msgid "The key in this example is the same as what I would get with :samp:`__name__+Vote.__name__`. But we won't create a dynamic name, this would be very clever and clever is bad."
msgstr ""

#: ../behaviors2.rst:220
# d003f425396847559de35a115b3b6e6c
msgid "By declaring a static name, we won't run into problems if we restructure the code."
msgstr ""

#: ../behaviors2.rst:222
# 2ffd9c17118e48bd8a658e723fe2801e
msgid "You can see, that we initialize the data if it doesn't exist. We work with PersistentDict and PersistentList. To understand why we do this, it is important to understand how the ZODB works."
msgstr ""

#: ../behaviors2.rst:226
# a904b5b8f9e841ad956d05638fa84ebe
msgid "The ZODB can store objects. It has a special root object that you will never touch. Whatever you store where, will be part of the root object, except if it is an object sublclassing :samp:`persistent.Persistent` Then it will be stored independently."
msgstr ""

#: ../behaviors2.rst:228
# ad9236386fef4ded81f6d763ee945288
msgid "Zope/ZODB Persistent objects note when you change an attribute on it and mark itself as changed. Changed objects will be saved to the database. This happens automatically. Each request begins a transaction and after our code ran and the Zope Server is preparing to send back the response we generated, the transaction will be committed and everything we changed will be saved."
msgstr ""

#: ../behaviors2.rst:230
# 99127738cca94378a6208feb230a7ba1
msgid "Now, if have a normal dictionary on a persistent object, and you will only change the dictionary, the persistent object has no way to know, if the dictionary has been changed. This `happens`_ from time to time."
msgstr ""

#: ../behaviors2.rst:232
# f965ee53970446c89700b979ef44faae
msgid "So one solution is to change the special attribute :samp:`_p_changed` to :samp:`True` on the persistent object, or to use a PersistentDict. That is what we are doing here."
msgstr ""

#: ../behaviors2.rst:234
# e76a4924daaa41efb3d268f0fba90a7e
msgid "You can find more information in the documentation of the ZODB, in particular `Rules for Persistent Classes <http://www.zodb.org/en/latest/documentation/guide/prog-zodb.html#rules-for-writing-persistent-classes>`_"
msgstr ""

#: ../behaviors2.rst:237
# 151c8fe4baad44ac8cbce1d8340c2b9e
msgid "Next we provide the internal fields via properties. Using this form of property, makes them read only property, as we did not define write handlers. We don't need them so we won't add them."
msgstr ""

#: ../behaviors2.rst:239
# 0c4a479bc84e4c3db9c9cc8ea730e434
msgid "As you have seen in the Schema declaration, if you run your site in debug mode, you will see an edit field for these fields. But trying to change these fields will throw an exception."
msgstr ""

#: ../behaviors2.rst:247
# b896c42b88c44d3989cb11473b2e05e6
msgid "Lets continue with this file:"
msgstr ""

#: ../behaviors2.rst:297
# bea22f9752da47be929f6b36984b2550
msgid "We start with a little helper method which is not exposed via the interface. We don't want people to vote twice. There are many ways to ensure this and each one has flaws."
msgstr ""

#: ../behaviors2.rst:299
# dfdd271615994887824234d04514c36c
msgid "We chose this way to show you how to access information from the request the browser of the user sent to us. First, we get the ip of the user, then we access a small bunch of headers from the users browser and generate an md5 checksum of this."
msgstr ""

#: ../behaviors2.rst:301
# 88ce978100824d4ebc13e65b89e3d49d
msgid "The vote method, wants a vote and a request. We check the preconditions, then we convert the vote to an integer, store the request has to :samp:`voted` and the votes into the :samp:`votes` dictionary. We just count there, how often any vote has been given."
msgstr ""

#: ../behaviors2.rst:303
# e564fdeb8dd94cbab6c05344816af19a
msgid "Everything else is just boring python."
msgstr ""

