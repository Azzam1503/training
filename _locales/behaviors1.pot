# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-28 20:53-0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../behaviors1.rst:2
# 4729cbb10a18432abae5f8feb7abff06
msgid "Behaviors"
msgstr ""

#: ../behaviors1.rst:0
# 614d2450fd9841928570c4b148a43368
msgid "Get the code!"
msgstr ""

#: ../behaviors1.rst:6
# 61e9d864419f4464813bd5a681f01f92
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout-directory:"
msgstr ""

#: ../behaviors1.rst:16
# d3059c87c297499baf0af477ecaf7954
msgid "You can extend the functionality of your dexterity object by writing an adapter that adapts your dexterity object to add another feature or aspect."
msgstr ""

#: ../behaviors1.rst:18
# adc4cee5fa1e4fbd91fa9a7638b31c4f
msgid "But if you want to use this adapter, you must somehow know that an object implements that. Also, you could not easily add more fields to an object with such an approach."
msgstr ""

#: ../behaviors1.rst:21
# d678a9d948d9440c9e6412d1d5e05fcc
msgid "Dexterity Approach"
msgstr ""

#: ../behaviors1.rst:25
# 7273f7c15b304bdfb6fab01f7bfb0ae3
msgid "Dexterity has a solution for it, with special adapters that are called and registered by the name behavior."
msgstr ""

#: ../behaviors1.rst:27
# c48e418bbd184104babe66a314ed3c4f
msgid "A behavior can be added to any content type through the web and during runtime."
msgstr ""

#: ../behaviors1.rst:29
# 71e9c44f64ee417c8ad9d97f39fd9d4a
msgid "All default views know about the concept of behaviors and when rendering forms, the views also check whether there are behaviors referenced with the current context and if these behavior have a schema of their own, these fields get shown in addition."
msgstr ""

#: ../behaviors1.rst:31
# 8d8e78f57e8e4dc9919d97b9a32c0f10
msgid "This this functionality in place, you can extend your content types during runtime, through the web."
msgstr ""

#: ../behaviors1.rst:34
# 341691152435430abcc675c3a62c9919
msgid "Names and Theory"
msgstr ""

#: ../behaviors1.rst:38
# e214204d11ad47a69b95a8d66a139b50
msgid "The name behavior is not a standard term in the software development. But it is a good idea to think of a behavior as an aspect. You are adding an aspect to your content type, you want to write your aspect in such a way, that it works independent of the content type on which the aspect is applied. You should not have dependencies to specific fields of your object or to other behaviors."
msgstr ""

#: ../behaviors1.rst:40
# eee2049c02d24489ace1656c5a029718
msgid "Such an object allows you to apply the `Open/closed principle`_ to your dexterity objects."
msgstr ""

#: ../behaviors1.rst:49
# a38466828c3a4a53913bcfb88c8f0ed6
msgid "Practical example"
msgstr ""

#: ../behaviors1.rst:53
# 934324641dbd45e39255125e62b958b6
msgid "So, let us write our own small behavior."
msgstr ""

#: ../behaviors1.rst:55
# 8ed35171e78941b2bc207209bcc5e240
msgid "In the future, we want our presentation be represented in Lanyrd too. For now we will just provide a link so that visitors can collaborate easily with the lanyrd site."
msgstr ""

#: ../behaviors1.rst:57
# 0ce5007206474f61b8c028c15c25de9b
msgid "So for now, our behavior just adds a new field for storing the url to Lanyrd."
msgstr ""

#: ../behaviors1.rst:59
# 3c40f2ec84d14833937f2da68288d2a8
msgid "We want to keep a clean structure, so we create a :file:`behaviors` directory first, and include it into the zcml declarations of our :file:`configure.zcml`."
msgstr ""

#: ../behaviors1.rst:65
# a095ecae149745a69a4f8f74f9800d10
msgid "Then, we add an empty :file:`behaviors/__init__.py` and a :file:`behaviors/configure.zcml` containing"
msgstr ""

#: ../behaviors1.rst:0
# 54b269d6817a4d7ba2aac7ec6c4bbdea
msgid "Advanced reference"
msgstr ""

#: ../behaviors1.rst:71
# 962e8a71212b465a95331e0530dd605e
msgid "The original documentation is doctest code, so no documentation and no debuggable test."
msgstr ""

#: ../behaviors1.rst:73
# c0f867fd763f4faf917da6988b4b6cae
msgid "It can be a bit confusing of when to use factory, or marker interfaces and when not."
msgstr ""

#: ../behaviors1.rst:75
# 91715c1e390b4ef585d30fa5d94e4d45
msgid "If you do not define a factory, your attributes will be stored directly on the object. This can result in clashes with other behaviors."
msgstr ""

#: ../behaviors1.rst:77
# 19f6079f44d24fd18673f86b1a6fd0ab
msgid "You can avoid this by using the plone.behavior.AnnotationStorage factory. This one stores your attributes in an :ref:`Annotation <plone:annotations>`. But then you *must* use a marker interface if you want to have custom viewlets, browser views or portlets."
msgstr ""

#: ../behaviors1.rst:80
# 8ceef244637f46cdbf53ee248790ed54
msgid "Without it, you would have no interface against which you could register your views."
msgstr ""

#: ../behaviors1.rst:101
# 2c116d03c59343989ca5e2b0c8b806d1
msgid "And a :file:`behaviors/social.py` containing:"
msgstr ""

#: ../behaviors1.rst:133
# 2968dc7c3b3047e2abeb9304e3ccb97d
msgid "Lets get through this step by step."
msgstr ""

#: ../behaviors1.rst:135
# 472d190d4e8641df9ddc172b7784467a
msgid "We register a behavior in :ref:`behaviors/configure.zcml <social-behavior-zcml-label>`. We do not say for which content type this behavior is valid. You do this, through the web or in the GenericSetup profile."
msgstr ""

#: ../behaviors1.rst:136
# f62b89d1d20a4b7a808211486b0f9f7a
msgid "We create a marker interface in :ref:`behaviors/social.py <social-behavior-python-label>` for our behavior and make it also a schema containing the fields we want to declare. We could just use define schema fields on a zope.intereface class, but we use an extended form from `plone.supermodel`_, else we could not use the fieldset features."
msgstr ""

#: ../behaviors1.rst:138
# f162506a6e764d12a2337838533a8fea
msgid "We add a `fieldset`_ So that our fields are not mixed with the normal fields of the object."
msgstr ""

#: ../behaviors1.rst:139
# c99a14808ba0477ead45fed9574a4192
msgid "We add a normal `URI`_ schema field to store the URI to lanyrd."
msgstr ""

#: ../behaviors1.rst:140
# df7f65d45d5c44b5919b806369b140d9
msgid "We mark our schema es a class that also implements the `IFormFieldProvider`_ interface. This is a marker interface, we do not need to implement anything to provide the interface."
msgstr ""

#: ../behaviors1.rst:143
# 384a951601694c56bc9a7961cb9920d2
msgid "Adding it to our talk"
msgstr ""

#: ../behaviors1.rst:147
# a1048a1bcfeb496588ab80df091bd058
msgid "We could add this behavior now via the plone control panel. But instead, we will do it directly properly in our GenericSetup profile"
msgstr ""

#: ../behaviors1.rst:149
# 33574ac6b44148578f59368f13325562
msgid "We must add the behavior to :file:`profiles/default/types/talk.xml`:"
msgstr ""

